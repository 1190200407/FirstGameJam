Shader "Custom/WorldBlendPostProcessing"
{
    Properties
    {
        _MainTex ("表世界 Texture", 2D) = "white" {}      // Default texture (scene color)
        _LightMask ("Light Mask", 2D) = "white" {}         // Mask generated by the light camera
        _InnerWorldTex ("里世界 Texture", 2D) = "white" {}  // Inner world texture
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            ZTest Always Cull Off ZWrite Off

            CGPROGRAM
            #pragma vertex vert_img
            #pragma fragment frag
            #include "UnityCG.cginc"

            sampler2D _MainTex;
            sampler2D _LightMask;
            sampler2D _InnerWorldTex;

            fixed4 frag(v2f_img i) : SV_Target
            {
                // Sample the screen color (outer world)
                fixed4 outerWorldColor = tex2D(_MainTex, i.uv);
                
                // Sample the light mask
                float lightIntensity = tex2D(_LightMask, i.uv).r; // We use red channel as grayscale

                // Sample the inner world
                fixed4 innerWorldColor = tex2D(_InnerWorldTex, i.uv);

                // Blend between outer world and inner world based on light mask intensity
                fixed4 finalColor = lerp(outerWorldColor, innerWorldColor, lightIntensity);
                return finalColor;
            }
            ENDCG
        }
    }
    FallBack Off
}
